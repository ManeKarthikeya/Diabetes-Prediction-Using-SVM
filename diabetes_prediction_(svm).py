# -*- coding: utf-8 -*-
"""Diabetes Prediction (SVM).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ehLwtMiF0NRzNJD9LvSUaYGk4BoW92UY

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collaction and Analysis

PIMA Diabetes Dataset
"""

# loading the dataset to a pandas dataframe
diabetes_dataset = pd.read_csv('path of csv dataset')

# printing first 5 rows of dataset
diabetes_dataset.head()

# number of rows & columns of dataset
diabetes_dataset.shape

# getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 ---> Non-Diabetic

1 ---> Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# separating the data & labels
x = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
y = diabetes_dataset['Outcome']

print(x)

print(y)

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(x)

standardized_data = scaler.transform(x)

print (standardized_data)

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(x, y, test_size = 0.2, stratify = y, random_state = 2)

print(x.shape, X_train.shape, X_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

# training the support vector Mechine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy*100,'%')

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy*100,'%')

"""Making a Predictive System"""

input_data = (Give input hear)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standatdize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')